
LM35_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000006d8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f4f  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e1  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a9  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f2  00000000  00000000  00002d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000333b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  8e:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable_pulse>:
	//Entry mode: increment, no shift
	lcd_cmd(0x06);


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_enable_pulse+0x8>
  a2:	00 00       	nop
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_enable_pulse+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_enable_pulse+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <lcd_send_nibble>:
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	93 7c       	andi	r25, 0xC3	; 195
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	83 ff       	sbrs	r24, 3
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_send_nibble+0x10>
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	94 60       	ori	r25, 0x04	; 4
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	82 ff       	sbrs	r24, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_send_nibble+0x1a>
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	98 60       	ori	r25, 0x08	; 8
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	81 ff       	sbrs	r24, 1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <lcd_send_nibble+0x24>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	80 ff       	sbrs	r24, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_send_nibble+0x2e>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable_pulse>
  ea:	08 95       	ret

000000ec <lcd_send_byte>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	21 f4       	brne	.+8      	; 0xfc <lcd_send_byte+0x10>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_send_byte+0x16>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
 102:	8c 2f       	mov	r24, r28
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 10c:	8c 2f       	mov	r24, r28
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_cmd>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 122:	c1 50       	subi	r28, 0x01	; 1
 124:	c2 30       	cpi	r28, 0x02	; 2
 126:	30 f4       	brcc	.+12     	; 0x134 <lcd_cmd+0x1c>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_cmd+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_cmd+0x1a>
 132:	00 00       	nop
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 13e:	08 95       	ret

00000140 <lcd_set_cursor>:
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <lcd_set_cursor+0x8>
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_set_cursor+0xa>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	86 2f       	mov	r24, r22
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 0f       	add	r24, r25
 150:	80 68       	ori	r24, 0x80	; 128
 152:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 156:	08 95       	ret

00000158 <lcd_print>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_print+0xe>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <lcd_print+0x8>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_clear>:
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 178:	08 95       	ret

0000017a <lcd_print_uint16>:
}

// function to print integers. (we use recursion)
void lcd_print_uint16(uint16_t v)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
	if (v >= 10)
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	91 05       	cpc	r25, r1
 184:	68 f0       	brcs	.+26     	; 0x1a0 <lcd_print_uint16+0x26>
	{
		lcd_print_uint16(v / 10);  				 // print higher digits first
 186:	9c 01       	movw	r18, r24
 188:	ad ec       	ldi	r26, 0xCD	; 205
 18a:	bc ec       	ldi	r27, 0xCC	; 204
 18c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_print_uint16>
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
 1a0:	9e 01       	movw	r18, r28
 1a2:	ad ec       	ldi	r26, 0xCD	; 205
 1a4:	bc ec       	ldi	r27, 0xCC	; 204
 1a6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	9c 01       	movw	r18, r24
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	82 0f       	add	r24, r18
 1ca:	93 1f       	adc	r25, r19
 1cc:	9e 01       	movw	r18, r28
 1ce:	28 1b       	sub	r18, r24
 1d0:	39 0b       	sbc	r19, r25
 1d2:	c9 01       	movw	r24, r18
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <lcd_print_float>:
void lcd_print_float(float value)
{
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	4b 01       	movw	r8, r22
 1f2:	5c 01       	movw	r10, r24
	if (value < 0)				// Handle negative numbers
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	a9 01       	movw	r20, r18
 1fa:	0e 94 08 02 	call	0x410	; 0x410 <__cmpsf2>
 1fe:	88 23       	and	r24, r24
 200:	3c f4       	brge	.+14     	; 0x210 <lcd_print_float+0x30>

	{
		lcd_data('-');
 202:	8d e2       	ldi	r24, 0x2D	; 45
 204:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
		value = -value;
 208:	b7 fa       	bst	r11, 7
 20a:	b0 94       	com	r11
 20c:	b7 f8       	bld	r11, 7
 20e:	b0 94       	com	r11
	}

	// Integer part
	uint16_t int_part = (uint16_t)value;
 210:	c5 01       	movw	r24, r10
 212:	b4 01       	movw	r22, r8
 214:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
 218:	6b 01       	movw	r12, r22
 21a:	7c 01       	movw	r14, r24
	lcd_print_uint16(int_part);
 21c:	cb 01       	movw	r24, r22
 21e:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_print_uint16>

	lcd_data('.');
 222:	8e e2       	ldi	r24, 0x2E	; 46
 224:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>

	// Fractional part (2 digits)
	float frac = value - int_part;
 228:	b6 01       	movw	r22, r12
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 3c 02 	call	0x478	; 0x478 <__floatunsisf>
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	c5 01       	movw	r24, r10
 238:	b4 01       	movw	r22, r8
 23a:	0e 94 9b 01 	call	0x336	; 0x336 <__subsf3>
	frac = frac * 100.0f;       // scale to 2 decimal places
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	48 ec       	ldi	r20, 0xC8	; 200
 244:	52 e4       	ldi	r21, 0x42	; 66
 246:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__mulsf3>
	uint16_t frac_part = (uint16_t)(frac + 0.5f);  // rounding
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	0e 94 9c 01 	call	0x338	; 0x338 <__addsf3>
 256:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
 25a:	6b 01       	movw	r12, r22
 25c:	7c 01       	movw	r14, r24

	// Handle leading zero after decimal (e.g., 3.05)
	if (frac_part < 10)
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	c8 16       	cp	r12, r24
 262:	d1 04       	cpc	r13, r1
 264:	18 f4       	brcc	.+6      	; 0x26c <lcd_print_float+0x8c>
	lcd_data('0');
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>

	lcd_print_uint16(frac_part);
 26c:	c6 01       	movw	r24, r12
 26e:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_print_uint16>
}
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	9f 90       	pop	r9
 280:	8f 90       	pop	r8
 282:	08 95       	ret

00000284 <ADC_init>:
#include "lcd.h"



void ADC_init(void){
	ADMUX|=(1<<REFS0);		// AVCC (5V), INPUT=ADC0
 284:	ec e7       	ldi	r30, 0x7C	; 124
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);		//ENABLE ADC
 28e:	ea e7       	ldi	r30, 0x7A	; 122
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	87 68       	ori	r24, 0x87	; 135
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <ADC_read>:
}

uint16_t ADC_read(uint8_t channel){
	
	channel &= 0x07;			//		limit 0-7
 29a:	87 70       	andi	r24, 0x07	; 7
	ADMUX=(ADMUX & 0xF8)|channel;		//select channel
 29c:	ec e7       	ldi	r30, 0x7C	; 124
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	90 81       	ld	r25, Z
 2a2:	98 7f       	andi	r25, 0xF8	; 248
 2a4:	89 2b       	or	r24, r25
 2a6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);		//start conversion
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));		//wait for conversion complete
 2b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2b6:	86 fd       	sbrc	r24, 6
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <ADC_read+0x18>
	return(ADCL | (ADCH << 8));			//combine result
 2ba:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	98 2f       	mov	r25, r24
 2c6:	88 27       	eor	r24, r24
}
 2c8:	82 2b       	or	r24, r18
 2ca:	08 95       	ret

000002cc <main>:

int main(void)
{
	uint16_t adc_value;
	void lcd_init(void);  					
	ADC_init();		//Call adc initialisation 
 2cc:	0e 94 42 01 	call	0x284	; 0x284 <ADC_init>
	
	    while (1) 
    {
		float temp;
		lcd_clear();
 2d0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clear>
		lcd_set_cursor(0,0);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print("Temperature:");
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
		adc_value=ADC_read(0);				///read from analog channel 0(A0 pin into aurduino)
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_read>
		temp=adc_value*0.488;				//converting adc value into temperature
 2ea:	bc 01       	movw	r22, r24
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 3c 02 	call	0x478	; 0x478 <__floatunsisf>
 2f4:	23 e2       	ldi	r18, 0x23	; 35
 2f6:	3b ed       	ldi	r19, 0xDB	; 219
 2f8:	49 ef       	ldi	r20, 0xF9	; 249
 2fa:	5e e3       	ldi	r21, 0x3E	; 62
 2fc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__mulsf3>
 300:	6b 01       	movw	r12, r22
 302:	7c 01       	movw	r14, r24
		lcd_set_cursor(1,0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print_float(temp);		//printing temperature
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print_float>
		lcd_data(0xDF);				//to print degree symbol (came from datasheet)
 314:	8f ed       	ldi	r24, 0xDF	; 223
 316:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
		lcd_print("C");
 31a:	8d e0       	ldi	r24, 0x0D	; 13
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	89 e6       	ldi	r24, 0x69	; 105
 326:	98 e1       	ldi	r25, 0x18	; 24
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x5c>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x66>
 332:	00 00       	nop
 334:	cd cf       	rjmp	.-102    	; 0x2d0 <main+0x4>

00000336 <__subsf3>:
 336:	50 58       	subi	r21, 0x80	; 128

00000338 <__addsf3>:
 338:	bb 27       	eor	r27, r27
 33a:	aa 27       	eor	r26, r26
 33c:	0e 94 b3 01 	call	0x366	; 0x366 <__addsf3x>
 340:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_round>
 344:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_pscA>
 348:	38 f0       	brcs	.+14     	; 0x358 <__addsf3+0x20>
 34a:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_pscB>
 34e:	20 f0       	brcs	.+8      	; 0x358 <__addsf3+0x20>
 350:	39 f4       	brne	.+14     	; 0x360 <__addsf3+0x28>
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	19 f4       	brne	.+6      	; 0x35c <__addsf3+0x24>
 356:	26 f4       	brtc	.+8      	; 0x360 <__addsf3+0x28>
 358:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3+0x28>
 35e:	e0 95       	com	r30
 360:	e7 fb       	bst	r30, 7
 362:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>

00000366 <__addsf3x>:
 366:	e9 2f       	mov	r30, r25
 368:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_split3>
 36c:	58 f3       	brcs	.-42     	; 0x344 <__addsf3+0xc>
 36e:	ba 17       	cp	r27, r26
 370:	62 07       	cpc	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	20 f0       	brcs	.+8      	; 0x382 <__addsf3x+0x1c>
 37a:	79 f4       	brne	.+30     	; 0x39a <__addsf3x+0x34>
 37c:	a6 f5       	brtc	.+104    	; 0x3e6 <__addsf3x+0x80>
 37e:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_zero>
 382:	0e f4       	brtc	.+2      	; 0x386 <__addsf3x+0x20>
 384:	e0 95       	com	r30
 386:	0b 2e       	mov	r0, r27
 388:	ba 2f       	mov	r27, r26
 38a:	a0 2d       	mov	r26, r0
 38c:	0b 01       	movw	r0, r22
 38e:	b9 01       	movw	r22, r18
 390:	90 01       	movw	r18, r0
 392:	0c 01       	movw	r0, r24
 394:	ca 01       	movw	r24, r20
 396:	a0 01       	movw	r20, r0
 398:	11 24       	eor	r1, r1
 39a:	ff 27       	eor	r31, r31
 39c:	59 1b       	sub	r21, r25
 39e:	99 f0       	breq	.+38     	; 0x3c6 <__addsf3x+0x60>
 3a0:	59 3f       	cpi	r21, 0xF9	; 249
 3a2:	50 f4       	brcc	.+20     	; 0x3b8 <__addsf3x+0x52>
 3a4:	50 3e       	cpi	r21, 0xE0	; 224
 3a6:	68 f1       	brcs	.+90     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3a8:	1a 16       	cp	r1, r26
 3aa:	f0 40       	sbci	r31, 0x00	; 0
 3ac:	a2 2f       	mov	r26, r18
 3ae:	23 2f       	mov	r18, r19
 3b0:	34 2f       	mov	r19, r20
 3b2:	44 27       	eor	r20, r20
 3b4:	58 5f       	subi	r21, 0xF8	; 248
 3b6:	f3 cf       	rjmp	.-26     	; 0x39e <__addsf3x+0x38>
 3b8:	46 95       	lsr	r20
 3ba:	37 95       	ror	r19
 3bc:	27 95       	ror	r18
 3be:	a7 95       	ror	r26
 3c0:	f0 40       	sbci	r31, 0x00	; 0
 3c2:	53 95       	inc	r21
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__addsf3x+0x52>
 3c6:	7e f4       	brtc	.+30     	; 0x3e6 <__addsf3x+0x80>
 3c8:	1f 16       	cp	r1, r31
 3ca:	ba 0b       	sbc	r27, r26
 3cc:	62 0b       	sbc	r22, r18
 3ce:	73 0b       	sbc	r23, r19
 3d0:	84 0b       	sbc	r24, r20
 3d2:	ba f0       	brmi	.+46     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	a1 f0       	breq	.+40     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d8:	ff 0f       	add	r31, r31
 3da:	bb 1f       	adc	r27, r27
 3dc:	66 1f       	adc	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	c2 f7       	brpl	.-16     	; 0x3d4 <__addsf3x+0x6e>
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e6:	ba 0f       	add	r27, r26
 3e8:	62 1f       	adc	r22, r18
 3ea:	73 1f       	adc	r23, r19
 3ec:	84 1f       	adc	r24, r20
 3ee:	48 f4       	brcc	.+18     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f7 95       	ror	r31
 3fa:	9e 3f       	cpi	r25, 0xFE	; 254
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	b0 cf       	rjmp	.-160    	; 0x360 <__addsf3+0x28>
 400:	93 95       	inc	r25
 402:	88 0f       	add	r24, r24
 404:	08 f0       	brcs	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	99 27       	eor	r25, r25
 408:	ee 0f       	add	r30, r30
 40a:	97 95       	ror	r25
 40c:	87 95       	ror	r24
 40e:	08 95       	ret

00000410 <__cmpsf2>:
 410:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fp_cmp>
 414:	08 f4       	brcc	.+2      	; 0x418 <__cmpsf2+0x8>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	08 95       	ret

0000041a <__fixunssfsi>:
 41a:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 41e:	88 f0       	brcs	.+34     	; 0x442 <__fixunssfsi+0x28>
 420:	9f 57       	subi	r25, 0x7F	; 127
 422:	98 f0       	brcs	.+38     	; 0x44a <__fixunssfsi+0x30>
 424:	b9 2f       	mov	r27, r25
 426:	99 27       	eor	r25, r25
 428:	b7 51       	subi	r27, 0x17	; 23
 42a:	b0 f0       	brcs	.+44     	; 0x458 <__fixunssfsi+0x3e>
 42c:	e1 f0       	breq	.+56     	; 0x466 <__fixunssfsi+0x4c>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	1a f0       	brmi	.+6      	; 0x43e <__fixunssfsi+0x24>
 438:	ba 95       	dec	r27
 43a:	c9 f7       	brne	.-14     	; 0x42e <__fixunssfsi+0x14>
 43c:	14 c0       	rjmp	.+40     	; 0x466 <__fixunssfsi+0x4c>
 43e:	b1 30       	cpi	r27, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <__fixunssfsi+0x4c>
 442:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_zero>
 446:	b1 e0       	ldi	r27, 0x01	; 1
 448:	08 95       	ret
 44a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_zero>
 44e:	67 2f       	mov	r22, r23
 450:	78 2f       	mov	r23, r24
 452:	88 27       	eor	r24, r24
 454:	b8 5f       	subi	r27, 0xF8	; 248
 456:	39 f0       	breq	.+14     	; 0x466 <__fixunssfsi+0x4c>
 458:	b9 3f       	cpi	r27, 0xF9	; 249
 45a:	cc f3       	brlt	.-14     	; 0x44e <__fixunssfsi+0x34>
 45c:	86 95       	lsr	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b3 95       	inc	r27
 464:	d9 f7       	brne	.-10     	; 0x45c <__fixunssfsi+0x42>
 466:	3e f4       	brtc	.+14     	; 0x476 <__fixunssfsi+0x5c>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <__floatunsisf>:
 478:	e8 94       	clt
 47a:	09 c0       	rjmp	.+18     	; 0x48e <__floatsisf+0x12>

0000047c <__floatsisf>:
 47c:	97 fb       	bst	r25, 7
 47e:	3e f4       	brtc	.+14     	; 0x48e <__floatsisf+0x12>
 480:	90 95       	com	r25
 482:	80 95       	com	r24
 484:	70 95       	com	r23
 486:	61 95       	neg	r22
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	99 23       	and	r25, r25
 490:	a9 f0       	breq	.+42     	; 0x4bc <__floatsisf+0x40>
 492:	f9 2f       	mov	r31, r25
 494:	96 e9       	ldi	r25, 0x96	; 150
 496:	bb 27       	eor	r27, r27
 498:	93 95       	inc	r25
 49a:	f6 95       	lsr	r31
 49c:	87 95       	ror	r24
 49e:	77 95       	ror	r23
 4a0:	67 95       	ror	r22
 4a2:	b7 95       	ror	r27
 4a4:	f1 11       	cpse	r31, r1
 4a6:	f8 cf       	rjmp	.-16     	; 0x498 <__floatsisf+0x1c>
 4a8:	fa f4       	brpl	.+62     	; 0x4e8 <__floatsisf+0x6c>
 4aa:	bb 0f       	add	r27, r27
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <__floatsisf+0x36>
 4ae:	60 ff       	sbrs	r22, 0
 4b0:	1b c0       	rjmp	.+54     	; 0x4e8 <__floatsisf+0x6c>
 4b2:	6f 5f       	subi	r22, 0xFF	; 255
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <__floatsisf+0x6c>
 4bc:	88 23       	and	r24, r24
 4be:	11 f0       	breq	.+4      	; 0x4c4 <__floatsisf+0x48>
 4c0:	96 e9       	ldi	r25, 0x96	; 150
 4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <__floatsisf+0x6a>
 4c4:	77 23       	and	r23, r23
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <__floatsisf+0x54>
 4c8:	9e e8       	ldi	r25, 0x8E	; 142
 4ca:	87 2f       	mov	r24, r23
 4cc:	76 2f       	mov	r23, r22
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <__floatsisf+0x5e>
 4d0:	66 23       	and	r22, r22
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <__floatsisf+0x74>
 4d4:	96 e8       	ldi	r25, 0x86	; 134
 4d6:	86 2f       	mov	r24, r22
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	2a f0       	brmi	.+10     	; 0x4e8 <__floatsisf+0x6c>
 4de:	9a 95       	dec	r25
 4e0:	66 0f       	add	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	88 1f       	adc	r24, r24
 4e6:	da f7       	brpl	.-10     	; 0x4de <__floatsisf+0x62>
 4e8:	88 0f       	add	r24, r24
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	97 f9       	bld	r25, 7
 4f0:	08 95       	ret

000004f2 <__fp_cmp>:
 4f2:	99 0f       	add	r25, r25
 4f4:	00 08       	sbc	r0, r0
 4f6:	55 0f       	add	r21, r21
 4f8:	aa 0b       	sbc	r26, r26
 4fa:	e0 e8       	ldi	r30, 0x80	; 128
 4fc:	fe ef       	ldi	r31, 0xFE	; 254
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	e8 07       	cpc	r30, r24
 504:	f9 07       	cpc	r31, r25
 506:	c0 f0       	brcs	.+48     	; 0x538 <__fp_cmp+0x46>
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	e4 07       	cpc	r30, r20
 50e:	f5 07       	cpc	r31, r21
 510:	98 f0       	brcs	.+38     	; 0x538 <__fp_cmp+0x46>
 512:	62 1b       	sub	r22, r18
 514:	73 0b       	sbc	r23, r19
 516:	84 0b       	sbc	r24, r20
 518:	95 0b       	sbc	r25, r21
 51a:	39 f4       	brne	.+14     	; 0x52a <__fp_cmp+0x38>
 51c:	0a 26       	eor	r0, r26
 51e:	61 f0       	breq	.+24     	; 0x538 <__fp_cmp+0x46>
 520:	23 2b       	or	r18, r19
 522:	24 2b       	or	r18, r20
 524:	25 2b       	or	r18, r21
 526:	21 f4       	brne	.+8      	; 0x530 <__fp_cmp+0x3e>
 528:	08 95       	ret
 52a:	0a 26       	eor	r0, r26
 52c:	09 f4       	brne	.+2      	; 0x530 <__fp_cmp+0x3e>
 52e:	a1 40       	sbci	r26, 0x01	; 1
 530:	a6 95       	lsr	r26
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	81 1d       	adc	r24, r1
 536:	81 1d       	adc	r24, r1
 538:	08 95       	ret

0000053a <__fp_inf>:
 53a:	97 f9       	bld	r25, 7
 53c:	9f 67       	ori	r25, 0x7F	; 127
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	08 95       	ret

00000546 <__fp_nan>:
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	80 ec       	ldi	r24, 0xC0	; 192
 54a:	08 95       	ret

0000054c <__fp_pscA>:
 54c:	00 24       	eor	r0, r0
 54e:	0a 94       	dec	r0
 550:	16 16       	cp	r1, r22
 552:	17 06       	cpc	r1, r23
 554:	18 06       	cpc	r1, r24
 556:	09 06       	cpc	r0, r25
 558:	08 95       	ret

0000055a <__fp_pscB>:
 55a:	00 24       	eor	r0, r0
 55c:	0a 94       	dec	r0
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	14 06       	cpc	r1, r20
 564:	05 06       	cpc	r0, r21
 566:	08 95       	ret

00000568 <__fp_round>:
 568:	09 2e       	mov	r0, r25
 56a:	03 94       	inc	r0
 56c:	00 0c       	add	r0, r0
 56e:	11 f4       	brne	.+4      	; 0x574 <__fp_round+0xc>
 570:	88 23       	and	r24, r24
 572:	52 f0       	brmi	.+20     	; 0x588 <__fp_round+0x20>
 574:	bb 0f       	add	r27, r27
 576:	40 f4       	brcc	.+16     	; 0x588 <__fp_round+0x20>
 578:	bf 2b       	or	r27, r31
 57a:	11 f4       	brne	.+4      	; 0x580 <__fp_round+0x18>
 57c:	60 ff       	sbrs	r22, 0
 57e:	04 c0       	rjmp	.+8      	; 0x588 <__fp_round+0x20>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	08 95       	ret

0000058a <__fp_split3>:
 58a:	57 fd       	sbrc	r21, 7
 58c:	90 58       	subi	r25, 0x80	; 128
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	59 f0       	breq	.+22     	; 0x5aa <__fp_splitA+0x10>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	71 f0       	breq	.+28     	; 0x5b4 <__fp_splitA+0x1a>
 598:	47 95       	ror	r20

0000059a <__fp_splitA>:
 59a:	88 0f       	add	r24, r24
 59c:	97 fb       	bst	r25, 7
 59e:	99 1f       	adc	r25, r25
 5a0:	61 f0       	breq	.+24     	; 0x5ba <__fp_splitA+0x20>
 5a2:	9f 3f       	cpi	r25, 0xFF	; 255
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <__fp_splitA+0x2a>
 5a6:	87 95       	ror	r24
 5a8:	08 95       	ret
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	14 06       	cpc	r1, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	f2 cf       	rjmp	.-28     	; 0x598 <__fp_split3+0xe>
 5b4:	46 95       	lsr	r20
 5b6:	f1 df       	rcall	.-30     	; 0x59a <__fp_splitA>
 5b8:	08 c0       	rjmp	.+16     	; 0x5ca <__fp_splitA+0x30>
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	18 06       	cpc	r1, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	f1 cf       	rjmp	.-30     	; 0x5a6 <__fp_splitA+0xc>
 5c4:	86 95       	lsr	r24
 5c6:	71 05       	cpc	r23, r1
 5c8:	61 05       	cpc	r22, r1
 5ca:	08 94       	sec
 5cc:	08 95       	ret

000005ce <__fp_zero>:
 5ce:	e8 94       	clt

000005d0 <__fp_szero>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	66 27       	eor	r22, r22
 5d4:	77 27       	eor	r23, r23
 5d6:	cb 01       	movw	r24, r22
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__mulsf3>:
 5dc:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3x>
 5e0:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_round>
 5e4:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_pscA>
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__mulsf3+0x1c>
 5ea:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_pscB>
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__mulsf3+0x1c>
 5f0:	95 23       	and	r25, r21
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <__mulsf3+0x1c>
 5f4:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 5f8:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>
 5fc:	11 24       	eor	r1, r1
 5fe:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>

00000602 <__mulsf3x>:
 602:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_split3>
 606:	70 f3       	brcs	.-36     	; 0x5e4 <__mulsf3+0x8>

00000608 <__mulsf3_pse>:
 608:	95 9f       	mul	r25, r21
 60a:	c1 f3       	breq	.-16     	; 0x5fc <__mulsf3+0x20>
 60c:	95 0f       	add	r25, r21
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	55 1f       	adc	r21, r21
 612:	62 9f       	mul	r22, r18
 614:	f0 01       	movw	r30, r0
 616:	72 9f       	mul	r23, r18
 618:	bb 27       	eor	r27, r27
 61a:	f0 0d       	add	r31, r0
 61c:	b1 1d       	adc	r27, r1
 61e:	63 9f       	mul	r22, r19
 620:	aa 27       	eor	r26, r26
 622:	f0 0d       	add	r31, r0
 624:	b1 1d       	adc	r27, r1
 626:	aa 1f       	adc	r26, r26
 628:	64 9f       	mul	r22, r20
 62a:	66 27       	eor	r22, r22
 62c:	b0 0d       	add	r27, r0
 62e:	a1 1d       	adc	r26, r1
 630:	66 1f       	adc	r22, r22
 632:	82 9f       	mul	r24, r18
 634:	22 27       	eor	r18, r18
 636:	b0 0d       	add	r27, r0
 638:	a1 1d       	adc	r26, r1
 63a:	62 1f       	adc	r22, r18
 63c:	73 9f       	mul	r23, r19
 63e:	b0 0d       	add	r27, r0
 640:	a1 1d       	adc	r26, r1
 642:	62 1f       	adc	r22, r18
 644:	83 9f       	mul	r24, r19
 646:	a0 0d       	add	r26, r0
 648:	61 1d       	adc	r22, r1
 64a:	22 1f       	adc	r18, r18
 64c:	74 9f       	mul	r23, r20
 64e:	33 27       	eor	r19, r19
 650:	a0 0d       	add	r26, r0
 652:	61 1d       	adc	r22, r1
 654:	23 1f       	adc	r18, r19
 656:	84 9f       	mul	r24, r20
 658:	60 0d       	add	r22, r0
 65a:	21 1d       	adc	r18, r1
 65c:	82 2f       	mov	r24, r18
 65e:	76 2f       	mov	r23, r22
 660:	6a 2f       	mov	r22, r26
 662:	11 24       	eor	r1, r1
 664:	9f 57       	subi	r25, 0x7F	; 127
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	9a f0       	brmi	.+38     	; 0x690 <__mulsf3_pse+0x88>
 66a:	f1 f0       	breq	.+60     	; 0x6a8 <__mulsf3_pse+0xa0>
 66c:	88 23       	and	r24, r24
 66e:	4a f0       	brmi	.+18     	; 0x682 <__mulsf3_pse+0x7a>
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	bb 1f       	adc	r27, r27
 676:	66 1f       	adc	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	a9 f7       	brne	.-22     	; 0x66c <__mulsf3_pse+0x64>
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	51 05       	cpc	r21, r1
 686:	80 f0       	brcs	.+32     	; 0x6a8 <__mulsf3_pse+0xa0>
 688:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 68c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	e4 f3       	brlt	.-8      	; 0x68c <__mulsf3_pse+0x84>
 694:	98 3e       	cpi	r25, 0xE8	; 232
 696:	d4 f3       	brlt	.-12     	; 0x68c <__mulsf3_pse+0x84>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	e7 95       	ror	r30
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	c1 f7       	brne	.-16     	; 0x698 <__mulsf3_pse+0x90>
 6a8:	fe 2b       	or	r31, r30
 6aa:	88 0f       	add	r24, r24
 6ac:	91 1d       	adc	r25, r1
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__umulhisi3>:
 6b6:	a2 9f       	mul	r26, r18
 6b8:	b0 01       	movw	r22, r0
 6ba:	b3 9f       	mul	r27, r19
 6bc:	c0 01       	movw	r24, r0
 6be:	a3 9f       	mul	r26, r19
 6c0:	70 0d       	add	r23, r0
 6c2:	81 1d       	adc	r24, r1
 6c4:	11 24       	eor	r1, r1
 6c6:	91 1d       	adc	r25, r1
 6c8:	b2 9f       	mul	r27, r18
 6ca:	70 0d       	add	r23, r0
 6cc:	81 1d       	adc	r24, r1
 6ce:	11 24       	eor	r1, r1
 6d0:	91 1d       	adc	r25, r1
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
