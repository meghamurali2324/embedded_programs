
PWM_T0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000766  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
	DDRD|=(1<<DDD6);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	TCCR0A|=(1<<WGM00);
  86:	84 b5       	in	r24, 0x24	; 36
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A|=(1<<WGM01);
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	84 bd       	out	0x24, r24	; 36
	TCCR0A|=(1<<COM0A1);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	80 68       	ori	r24, 0x80	; 128
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00);
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01);
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	85 bd       	out	0x25, r24	; 37
	
	
    while (1) 
    {
		for(uint8_t duty=0;duty<255;duty++){
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	08 c0       	rjmp	.+16     	; 0xb8 <main+0x38>
		OCR0A=duty;
  a8:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e3       	ldi	r30, 0x3F	; 63
  ac:	fc e9       	ldi	r31, 0x9C	; 156
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
	TCCR0B|=(1<<CS01);
	
	
    while (1) 
    {
		for(uint8_t duty=0;duty<255;duty++){
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	8f 3f       	cpi	r24, 0xFF	; 255
  ba:	b1 f7       	brne	.-20     	; 0xa8 <main+0x28>
  bc:	08 c0       	rjmp	.+16     	; 0xce <main+0x4e>
		OCR0A=duty;
		_delay_ms(10);
	}
	for(uint8_t duty=255;duty>0;duty--){
		OCR0A=duty;
  be:	87 bd       	out	0x27, r24	; 39
  c0:	ef e3       	ldi	r30, 0x3F	; 63
  c2:	fc e9       	ldi	r31, 0x9C	; 156
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x44>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
    {
		for(uint8_t duty=0;duty<255;duty++){
		OCR0A=duty;
		_delay_ms(10);
	}
	for(uint8_t duty=255;duty>0;duty--){
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	81 11       	cpse	r24, r1
  d0:	f6 cf       	rjmp	.-20     	; 0xbe <main+0x3e>
  d2:	e8 cf       	rjmp	.-48     	; 0xa4 <main+0x24>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
