
TIMER0_prescaler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000694  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002a  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
	DDRB|=(1<<DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	TCCR0A|=(1<<WGM01);			//CTC MODE
  86:	84 b5       	in	r24, 0x24	; 36
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	84 bd       	out	0x24, r24	; 36
	OCR0A=200;					//SET POINT EQUAL TO 200
  8c:	88 ec       	ldi	r24, 0xC8	; 200
  8e:	87 bd       	out	0x27, r24	; 39
	TCNT0=0;					//INITIAL VALUE
  90:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00);	
  92:	85 b5       	in	r24, 0x25	; 37
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS02);		//NO prescaling
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A);			//FLAG SET
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	85 bb       	out	0x15, r24	; 21
	while (1)
	{
		PORTB^=(1<<PORTB5);
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	89 27       	eor	r24, r25
  aa:	85 b9       	out	0x05, r24	; 5
		for(long int i=0; i<156; i++)
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	ba 01       	movw	r22, r20
  b2:	09 c0       	rjmp	.+18     	; 0xc6 <main+0x46>
		{
			while (!(TIFR0&(1<<OCF0A)))
  b4:	a9 9b       	sbis	0x15, 1	; 21
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x34>
			{
			}
			TIFR0|=(1<<OCF0A);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 bb       	out	0x15, r24	; 21
	TCCR0B|=(1<<CS02);		//NO prescaling
	TIFR0|=(1<<OCF0A);			//FLAG SET
	while (1)
	{
		PORTB^=(1<<PORTB5);
		for(long int i=0; i<156; i++)
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	6f 4f       	sbci	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	4c 39       	cpi	r20, 0x9C	; 156
  c8:	51 05       	cpc	r21, r1
  ca:	61 05       	cpc	r22, r1
  cc:	71 05       	cpc	r23, r1
  ce:	94 f3       	brlt	.-28     	; 0xb4 <main+0x34>
  d0:	e9 cf       	rjmp	.-46     	; 0xa4 <main+0x24>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
