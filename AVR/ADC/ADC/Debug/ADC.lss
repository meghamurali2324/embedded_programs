
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e22  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c5  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062c  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000458  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004dd  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
  8e:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable_pulse>:
}

// this function allows us to return the cursor to home
void lcd_home(void)
{
	lcd_cmd(0x02);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_enable_pulse+0x8>
  a2:	00 00       	nop
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_enable_pulse+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_enable_pulse+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <lcd_send_nibble>:
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	93 7c       	andi	r25, 0xC3	; 195
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	83 ff       	sbrs	r24, 3
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_send_nibble+0x10>
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	94 60       	ori	r25, 0x04	; 4
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	82 ff       	sbrs	r24, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_send_nibble+0x1a>
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	98 60       	ori	r25, 0x08	; 8
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	81 ff       	sbrs	r24, 1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <lcd_send_nibble+0x24>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	80 ff       	sbrs	r24, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_send_nibble+0x2e>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable_pulse>
  ea:	08 95       	ret

000000ec <lcd_send_byte>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	21 f4       	brne	.+8      	; 0xfc <lcd_send_byte+0x10>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_send_byte+0x16>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
 102:	8c 2f       	mov	r24, r28
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 10c:	8c 2f       	mov	r24, r28
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_cmd>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 122:	c1 50       	subi	r28, 0x01	; 1
 124:	c2 30       	cpi	r28, 0x02	; 2
 126:	30 f4       	brcc	.+12     	; 0x134 <lcd_cmd+0x1c>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_cmd+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_cmd+0x1a>
 132:	00 00       	nop
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 13e:	08 95       	ret

00000140 <lcd_set_cursor>:
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <lcd_set_cursor+0x8>
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_set_cursor+0xa>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	86 2f       	mov	r24, r22
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 0f       	add	r24, r25
 150:	80 68       	ori	r24, 0x80	; 128
 152:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 156:	08 95       	ret

00000158 <lcd_print>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_print+0xe>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <lcd_print+0x8>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_init>:
// this function initialises the lcd. (initialisation sequence from datasheet)

void lcd_init(void)
{
	// Make control and data pins outputs
	LCD_RS_DDR |= (1<<LCD_RS_PIN);
 172:	84 b1       	in	r24, 0x04	; 4
 174:	80 61       	ori	r24, 0x10	; 16
 176:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= (1<<LCD_EN_PIN);
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	84 b9       	out	0x04, r24	; 4
	LCD_D_DDR  |= (1<<LCD_D7_PIN)|(1<<LCD_D6_PIN)|(1<<LCD_D5_PIN)|(1<<LCD_D4_PIN);
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	8c 63       	ori	r24, 0x3C	; 60
 182:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <lcd_init+0x18>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x22>
 194:	00 00       	nop

	_delay_ms(20);               // power-up wait
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN); 				// RS=0
 196:	85 b1       	in	r24, 0x05	; 5
 198:	8f 7e       	andi	r24, 0xEF	; 239
 19a:	85 b9       	out	0x05, r24	; 5

	//  8-bit wake-up sequence (sent as high nibbles). why nibbles?
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);   		 // make EN =0 .
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	85 b9       	out	0x05, r24	; 5
	lcd_send_nibble(0x03);
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	9e e4       	ldi	r25, 0x4E	; 78
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x3a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0x40>
 1b2:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	87 e5       	ldi	r24, 0x57	; 87
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x4c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_init+0x52>
 1c4:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1cc:	87 e5       	ldi	r24, 0x57	; 87
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x5e>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x64>
 1d6:	00 00       	nop
	_delay_us(150);

	//Switch to 4-bit
	lcd_send_nibble(0x02);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1de:	87 e5       	ldi	r24, 0x57	; 87
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x70>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_init+0x76>
 1e8:	00 00       	nop
	_delay_us(150);

	// note that from here onwards its cmd !

	//Function set: 4-bit, 2 lines, 5x8 font
	lcd_cmd(0x28);
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Display off

	lcd_cmd(0x08);
 1f0:	88 e0       	ldi	r24, 0x08	; 8
 1f2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
	//Clear
	lcd_cmd(0x01);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Entry mode: increment, no shift
	lcd_cmd(0x06);
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 208:	08 95       	ret

0000020a <lcd_print_uint16>:
}

// function to print integers. (we use recursion)
void lcd_print_uint16(uint16_t v)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
	if (v >= 10)
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	91 05       	cpc	r25, r1
 214:	68 f0       	brcs	.+26     	; 0x230 <lcd_print_uint16+0x26>
	{
		lcd_print_uint16(v / 10);  				 // print higher digits first
 216:	9c 01       	movw	r18, r24
 218:	ad ec       	ldi	r26, 0xCD	; 205
 21a:	bc ec       	ldi	r27, 0xCC	; 204
 21c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print_uint16>
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
 230:	9e 01       	movw	r18, r28
 232:	ad ec       	ldi	r26, 0xCD	; 205
 234:	bc ec       	ldi	r27, 0xCC	; 204
 236:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	9c 01       	movw	r18, r24
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	9e 01       	movw	r18, r28
 25e:	28 1b       	sub	r18, r24
 260:	39 0b       	sbc	r19, r25
 262:	c9 01       	movw	r24, r18
 264:	80 5d       	subi	r24, 0xD0	; 208
 266:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <ADC_init>:
#include "lcd.h"



void ADC_init(void){
	ADMUX|=(1<<REFS0);		// AVCC (5V), INPUT=ADC0
 270:	ec e7       	ldi	r30, 0x7C	; 124
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);		//ENABLE ADC
 27a:	ea e7       	ldi	r30, 0x7A	; 122
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	87 68       	ori	r24, 0x87	; 135
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel){
	
	channel &= 0x07;			//		limit 0-7
 286:	87 70       	andi	r24, 0x07	; 7
	ADMUX=(ADMUX & 0xF8)|channel;		//select channel
 288:	ec e7       	ldi	r30, 0x7C	; 124
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	98 7f       	andi	r25, 0xF8	; 248
 290:	89 2b       	or	r24, r25
 292:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);		//start conversion
 294:	ea e7       	ldi	r30, 0x7A	; 122
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));		//wait for conversion complete
 29e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2a2:	86 fd       	sbrc	r24, 6
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <ADC_read+0x18>
	return(ADCL | (ADCH << 8));			//combine result
 2a6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	98 2f       	mov	r25, r24
 2b2:	88 27       	eor	r24, r24
}
 2b4:	82 2b       	or	r24, r18
 2b6:	08 95       	ret

000002b8 <main>:

int main(void)
{
	uint16_t adc_value;
	void lcd_init(void);  					
	ADC_init();		//Call adc initialisation 
 2b8:	0e 94 38 01 	call	0x270	; 0x270 <ADC_init>
	
	    while (1) 
    {
		lcd_init();
 2bc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_init>
		lcd_set_cursor(0,0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print("ADC VALUE:");
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
		adc_value=ADC_read(0);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 43 01 	call	0x286	; 0x286 <ADC_read>
 2d6:	ec 01       	movw	r28, r24
		lcd_set_cursor(1,0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print_uint16(adc_value);		//READ ANALOG CHANNEL 0
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print_uint16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	89 e6       	ldi	r24, 0x69	; 105
 2ea:	98 e1       	ldi	r25, 0x18	; 24
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x34>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x3e>
 2f6:	00 00       	nop
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <main+0x4>

000002fa <__umulhisi3>:
 2fa:	a2 9f       	mul	r26, r18
 2fc:	b0 01       	movw	r22, r0
 2fe:	b3 9f       	mul	r27, r19
 300:	c0 01       	movw	r24, r0
 302:	a3 9f       	mul	r26, r19
 304:	70 0d       	add	r23, r0
 306:	81 1d       	adc	r24, r1
 308:	11 24       	eor	r1, r1
 30a:	91 1d       	adc	r25, r1
 30c:	b2 9f       	mul	r27, r18
 30e:	70 0d       	add	r23, r0
 310:	81 1d       	adc	r24, r1
 312:	11 24       	eor	r1, r1
 314:	91 1d       	adc	r25, r1
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
